spring:
  cloud:
    stream:
      bindings:
        # the naming of bindings according to functional style api. process - the name of the method, in/out -
        # whether the we're reading or writing. 0 - ordinal number of the channel in the method.
        # If you use functional approach, you do not need to define input and output channels and binding interfaces
        # But we leave this definitions of channels so that the framework will create channels and binding interface for
        # us. And it will use the topics defined here
        process-in-0:
          destination: input-topic
        process-out-0:
          destination: output-topic
      kafka:
        streams:
          binder:
            brokers: localhost:9092
            configuration:
              commit.interval.ms: 100
              default:
                key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde


